{"version":3,"sources":["assets/img/avatar.svg","components/Users/Users.module.css","components/common/Pagginator/Paginator.module.css","components/common/Pagginator/Paginator.tsx","components/Users/User.tsx","redux/users-selectors.js","components/Users/UsersSearchForm.tsx","components/Users/UsersList.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","Paginator","pageSize","totalItemsCount","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","prevPortionPageNumber","nextPortionPageNumber","className","css","paginator","onClick","filter","p","map","page_number","selected_page","e","User","user","unfollow","follow","followingInProgress","user_block","user_logo","to","id","src","photos","small","avatar","alt","name","status","followed","disabled","some","getSelectUsers","state","usersPage","users","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getFilter","usersSearchFormValidate","value","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","values","setSubmitting","onFillterChanged","isSubmitting","type","as","UsersList","dispatch","useDispatch","history","useHistory","useEffect","parsed","require","parse","location","search","substr","actualPage","actualFilter","page","Number","getUsers","query","pathname","eunfollow","userId","efollow","user_list","console","log","pageNumber","u","UsersPage","pageTitle","Preloader"],"mappings":"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","file":"static/js/6.9708a0c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.acbde035.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user_block\":\"Users_user_block__3Pfvb\",\"user_logo\":\"Users_user_logo__1dtIo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected_page\":\"Paginator_selected_page__1Jxiw\",\"page_number\":\"Paginator_page_number__2bYsy\",\"paginator\":\"Paginator_paginator__3l2cm\"};","import React, { useState } from 'react';\r\n// @ts-ignore\r\nimport css from './Paginator.module.css';\r\n\r\ntype PropsTypes = {\r\n  pageSize: number\r\n  totalItemsCount: number\r\n  currentPage: number\r\n  onPageChanged: (pageNumber: number) => void\r\n  portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsTypes> = ({pageSize, totalItemsCount, currentPage, onPageChanged, portionSize = 35}) => {\r\n\r\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n  let pages: Array<number> = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  \r\n  let portionCount = Math.ceil(pagesCount / portionSize)\r\n  let [portionNumber, setPortionNumber] = useState(1)\r\n  let prevPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let nextPortionPageNumber = portionNumber * portionSize;\r\n  \r\n  \r\n\r\n  return <div className={css.paginator}>\r\n        {portionNumber > 1 && <button onClick={() => {setPortionNumber(--portionNumber)}}>PREV</button>}\r\n        \r\n        {pages.filter(p => p >= prevPortionPageNumber && p <= nextPortionPageNumber).map(p => {\r\n          return <span \r\n            className={css.page_number + ` ${currentPage === p && css.selected_page}`}\r\n            onClick={(e) => onPageChanged(p)} \r\n            key={p}>\r\n              {p}\r\n            </span>\r\n        })}\r\n\r\n        {portionCount > portionNumber && <button onClick={() => {setPortionNumber(++portionNumber)}}>NEXT</button>}\r\n      </div>\r\n}\r\n\r\nexport default Paginator;","import css from './Users.module.css';\r\nimport avatar from '../../assets/img/avatar.svg'\r\nimport React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\nimport { FilterT } from '../../redux/users-reducer';\r\nimport { useSelector } from 'react-redux';\r\n\r\ntype PropsType = {\r\n  user: UserType\r\n  unfollow: (userId:number) => void\r\n  follow: (userId:number) => void\r\n  followingInProgress: Array<number>\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, unfollow, follow, followingInProgress, ...props}) => {\r\n  \r\n\r\n  return (\r\n    <div className={css.user_block} key={user.id}>\r\n            <div className={css.user_logo}>\r\n              <NavLink to={'/profile/' + user.id}>\r\n              <img src={user.photos.small != null ? user.photos.small : avatar} alt=\"\" />\r\n              </NavLink>\r\n            </div>\r\n            <div className=\"user_full_name\">\r\n              {user.name}\r\n            </div>\r\n            <div className=\"user_status\">\r\n              {user.status}\r\n            </div>\r\n            {user.followed ? \r\n            <button disabled={followingInProgress.some(id => id === user.id)} onClick={\r\n              ()=>{\r\n                unfollow(user.id);\r\n              }\r\n            }>unfollow</button> :\r\n            <button disabled={followingInProgress.some(id => id === user.id)} onClick={\r\n              ()=>{\r\n                follow(user.id);\r\n              }\r\n            }>follow</button>\r\n            }\r\n          </div>\r\n  );\r\n}\r\n\r\nexport default User;","import { createSelector } from \"reselect\"\r\n\r\n\r\nexport const getSelectUsers         = state => state.usersPage.users\r\nexport const getPageSize            = state => state.usersPage.pageSize\r\nexport const getTotalUsersCount     = state => state.usersPage.totalUsersCount\r\nexport const getCurrentPage         = state => state.usersPage.currentPage\r\nexport const getIsFetching          = state => state.usersPage.isFetching\r\nexport const getFollowingInProgress = state => state.usersPage.followingInProgress\r\nexport const getFilter              = state => state.usersPage.filter\r\n\r\nexport const requestUsers           = state => state.usersPage.filter(u=>true)\r\n\r\n//for hard selectors\r\n// export const usersSuperSelector = \r\n// createSelector(selectUsers, pageSize, users => users(state).filter(u=>true)) example\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FilterT, follow } from '../../redux/users-reducer';\r\nimport { getFilter } from '../../redux/users-selectors';\r\n\r\n\r\n  const usersSearchFormValidate = (value:any) => {\r\n    const errors = {}\r\n    return errors\r\n  }\r\n  \r\n  type FormT = {\r\n    term: string\r\n    friend: string\r\n  }\r\n  \r\n  type PropsT = {\r\n    onFillterChanged: (filter:FilterT)=>void\r\n  }\r\n  \r\n  \r\n  const UsersSearchForm: React.FC<PropsT> = React.memo((props) => {\r\n    const filter = useSelector(getFilter)\r\n    const submit = (values: FormT, { setSubmitting } : {setSubmitting:(isSubmitting : boolean) => void}) => {\r\n      const filter: FilterT = {\r\n        term: values.term,\r\n        friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n      }\r\n      \r\n      props.onFillterChanged(filter);\r\n      setSubmitting(false)\r\n    }\r\n    return (\r\n      <div>\r\n          <Formik\r\n            enableReinitialize\r\n            initialValues={{ term: filter.term, friend: String(filter.friend) }}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n          >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              <Field type=\"text\" name=\"term\"/>\r\n              <Field as='select' name=\"friend\">\r\n                <option value='null'>All</option>\r\n                <option value='true'>Only followed</option>\r\n                <option value='false'>Only unfollowed</option>\r\n              </Field>\r\n              <button type='submit' disabled={isSubmitting}>\r\n                Find\r\n              </button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    );\r\n  })\r\n\r\nexport default UsersSearchForm;","// @ts-ignore\r\nimport css from './Users.module.css';\r\nimport React from 'react';\r\nimport Paginator from '../common/Pagginator/Paginator';\r\nimport User from './User';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport { FilterT, getUsers, unfollow, follow } from '../../redux/users-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsFetching, getCurrentPage, getFilter, getFollowingInProgress, getPageSize, getSelectUsers, getTotalUsersCount, requestUsers,} from '../../redux/users-selectors';\r\nimport { useEffect } from 'react';\r\nimport { UserType } from '../../types/types';\r\nimport * as queryString from 'querystring'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype PropsTypes = {\r\n}\r\n\r\ntype QuertParamsType = {term?: string; page?:string; friend?:string}\r\n\r\nconst UsersList: React.FC<PropsTypes> = (props) => {\r\n  \r\n  const users = useSelector(getSelectUsers)\r\n  const pageSize = useSelector(getPageSize)\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const isFetching = useSelector(getIsFetching)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n  const filter = useSelector(getFilter)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  \r\n  useEffect(()=>{\r\n    const queryString = require('querystring');\r\n    let parsed = queryString.parse(history.location.search.substr(1)) as QuertParamsType\r\n    \r\n\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n\r\n    if(!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n    if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n    switch(parsed.friend){\r\n      case \"null\":\r\n        actualFilter = {...actualFilter, friend: null}\r\n        break\r\n      case 'true':\r\n        actualFilter = {...actualFilter, friend: true}\r\n        break\r\n      case 'false':\r\n        actualFilter = {...actualFilter, friend: false}\r\n        break\r\n    }\r\n    \r\n    dispatch(getUsers(actualPage, pageSize, actualFilter));\r\n  },[])\r\n  \r\n  useEffect(()=>{\r\n    \r\n    const query: QuertParamsType = {}\r\n    if(!!filter.term) query.term = filter.term \r\n    if(filter.friend !== null) query.friend = String(filter.friend) \r\n    if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n    history.push({\r\n      pathname: \"/users\",\r\n      search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n    });\r\n  },[filter, currentPage])\r\n\r\n  const eunfollow = (userId:number) => {\r\n    dispatch(unfollow(userId))\r\n  }\r\n  const efollow = (userId:number) => {\r\n    dispatch(follow(userId))\r\n  }\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(getUsers(pageNumber, pageSize, filter));\r\n\r\n  }\r\n\r\n  const onFillterChanged = (filter: FilterT) => {\r\n    console.log(filter);\r\n    \r\n    dispatch(getUsers(1, pageSize, filter));\r\n  }\r\n\r\n  return (\r\n    <div className={css.user_list}>\r\n      <UsersSearchForm onFillterChanged={onFillterChanged}/>\r\n      <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n      <div>{users.map( (u:UserType) => <User follow={efollow} unfollow={eunfollow} followingInProgress={followingInProgress} user={u} key={u.id}/>)}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UsersList;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport UsersList from './UsersList';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype UsersPagePT = {\r\n  pageTitle: string\r\n}\r\nconst UsersPage: React.FC<UsersPagePT> = (props) => {\r\n    \r\nconst isFetching = useSelector(getIsFetching)\r\n\r\n  return <>\r\n    <h1>{props.pageTitle}</h1>\r\n    {isFetching ? <Preloader/> : null}\r\n    <UsersList/>\r\n  </>\r\n}\r\n\r\nexport default UsersPage;"],"sourceRoot":""}