{"version":3,"sources":["hocs/withAutRedirect.tsx","components/Dialogs/DialogName/DialogNavBlock.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogName/DialogNavBlock.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restPtops","to","module","exports","DialogNavBlock","className","css","dialogs_list_block","name","Message","dialogs_messages_list_block","messageText","maxLength20","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogsDataMap","dialogsData","map","dialog","id","messagesDataMap","messagesData","message","dialogs","dialogs_list","dialogs_messages_list","vals","sendMessage","newMessageBody","compose","dialogsPage","actions"],"mappings":"wMAMIA,EAA6B,SAACC,GAAD,MAAyB,CACtDC,OAAQD,EAAME,KAAKD,SAShB,SAASE,EAAuBC,GAiBnC,OADqCC,YAAyDN,EAAzDM,EAfiC,SAACC,GACnE,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAKL,EAGE,cAACG,EAAD,eAAeG,IAHF,cAAC,IAAD,CAAUC,GAAI,gB,oBClB1CC,EAAOC,QAAU,CAAC,mBAAqB,6C,oBCAvCD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,sBAAwB,yC,8ICQzGC,EANM,SAACL,GACpB,OACM,cAAC,IAAD,CAASE,GAAE,kBAAaF,EAAME,IAAMI,UAAWC,IAAIC,mBAAnD,SAAwER,EAAMS,Q,oCCGzEC,EANC,SAACV,GACf,OACM,qBAAKM,UAAWC,IAAII,4BAApB,SAAkDX,EAAMY,e,gBCuC1DC,EAAcC,YAAiB,IAc/BC,EAAsBC,YAAkC,CAACC,KAAM,wBAAzCD,EAZoD,SAAChB,GAE/E,OACE,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAeX,GAAcJ,KAAM,iBAAkBgB,YAAa,yBAE3G,8BAAK,kDAQIC,EA1CsB,SAAC1B,GAGpC,IAAI2B,EAAiB3B,EAAMN,MAAMkC,YAAYC,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAgBrB,KAAMqB,EAAOrB,KAAMP,GAAI4B,EAAO5B,GAAI6B,GAAID,EAAOC,IAASD,EAAOC,OACpIC,EAAkBhC,EAAMN,MAAMuC,aAAaJ,KAAI,SAAAK,GAAO,OAAI,cAAC,EAAD,CAAStB,YAAasB,EAAQtB,YAAamB,GAAIG,EAAQH,IAASG,EAAQH,OAOtI,OACE,sBAAKzB,UAAWC,IAAI4B,QAApB,UACE,qBAAK7B,UAAWC,IAAI6B,aAApB,SACGT,IAEH,sBAAKrB,UAAWC,IAAI8B,sBAApB,UACE,8BAAML,IACN,cAACjB,EAAD,CAAqBG,SAXP,SAACoB,GACjBtC,EAAMuC,YAAYD,EAAKE,0B,SCXdC,sBACb1C,aARoB,SAACL,GACrB,MAAO,CACLA,MAAOA,EAAMgD,eAMU,CAACH,YAAaI,IAAQJ,cAC/C1C,IAFa4C,CAGbf","file":"static/js/4.5408d77e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\r\n        let {isAuth, ...restPtops} = props\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n\r\n        return <Component {...restPtops as WCP}/>\r\n    }\r\n\r\n    // class RedirectComponent extends React.Component {\r\n    //     render() {\r\n    //         if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    //         return <Component {...this.props} />\r\n    //     }\r\n    // }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType,DispatchPropsType,WCP,AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_list_block\":\"DialogNavBlock_dialogs_list_block__W5euU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__LrdA6\",\"dialogs_list\":\"Dialogs_dialogs_list__3BoOj\",\"dialogs_messages_list\":\"Dialogs_dialogs_messages_list__21gmo\"};","import { NavLink } from 'react-router-dom';\r\nimport css from './DialogNavBlock.module.css';\r\n\r\nconst DialogNavBlock = (props) => {\r\n    return (\r\n          <NavLink to={`/dialogs${props.to}`} className={css.dialogs_list_block}>{props.name}</NavLink>\r\n    );\r\n  }\r\n  \r\n  export default DialogNavBlock;","import css from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n  return (\r\n        <div className={css.dialogs_messages_list_block}>{props.messageText}</div>\r\n  );\r\n}\r\n\r\nexport default Message;","import { reduxForm, Field, InjectedFormProps } from 'redux-form';\r\nimport DialogNavBlock from './DialogName/DialogNavBlock';\r\nimport css from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, requiredField } from '../../utils/validators/validators';\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n  state: InitialStateType\r\n  sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\ntype NewMessageFormType = {\r\n  newMessageBody: string\r\n}\r\n// type LoginFormValuesTKeys = Extract<keyof NewMessageFormType, string>\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  // let state = props.state;\r\n\r\n  let dialogsDataMap = props.state.dialogsData.map(dialog => <DialogNavBlock name={dialog.name} to={dialog.to} id={dialog.id} key={dialog.id}/>)\r\n  let messagesDataMap = props.state.messagesData.map(message => <Message messageText={message.messageText} id={message.id} key={message.id}/>)\r\n  // let newMessageBody = props.state.newMessageBody;\r\n\r\n  let addNewMessage = (vals: {newMessageBody: string}) => {\r\n      props.sendMessage(vals.newMessageBody)\r\n  }\r\n\r\n  return (\r\n    <div className={css.dialogs}>\r\n      <div className={css.dialogs_list}>\r\n        {dialogsDataMap}\r\n      </div>\r\n      <div className={css.dialogs_messages_list}>\r\n        <div>{messagesDataMap}</div>\r\n        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType,{}> & {}> = (props: any) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} validate={[requiredField, maxLength20]} name={'newMessageBody'} placeholder={'enter your message'}/>\r\n      </div>\r\n      <div><button>send</button></div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<NewMessageFormType, {}>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hocs/withAutRedirect';\r\nimport Dialogs from './Dialogs';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport { ComponentType } from 'react';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    state: state.dialogsPage\r\n  }\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}