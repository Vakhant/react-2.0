{"version":3,"sources":["hocs/withAutRedirect.js","components/Dialogs/DialogName/DialogNavBlock.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogName/DialogNavBlock.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogNavBlock","className","css","dialogs_list_block","name","Message","dialogs_messages_list_block","messageText","maxLength20","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogsDataMap","dialogsData","map","dialog","id","messagesDataMap","messagesData","message","dialogs","dialogs_list","dialogs_messages_list","vals","sendMessage","newMessageBody","compose","dialogsPage","dispatch","sendMessageCreator"],"mappings":"4NAKIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,WAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAQtC,OADqCM,YAAQX,EAARW,CAAoCL,K,oBChB7EM,EAAOC,QAAU,CAAC,mBAAqB,6C,oBCAvCD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,sBAAwB,yC,uJCQzGC,EANM,SAACN,GACpB,OACM,cAAC,IAAD,CAASC,GAAE,kBAAaD,EAAMC,IAAMM,UAAWC,IAAIC,mBAAnD,SAAwET,EAAMU,Q,oCCGzEC,EANC,SAACX,GACf,OACM,qBAAKO,UAAWC,IAAII,4BAApB,SAAkDZ,EAAMa,e,gBC8B1DC,EAAcC,YAAiB,IAc/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAZL,SAACjB,GAEtB,OACE,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAeX,GAAcJ,KAAM,iBAAkBgB,YAAa,yBAE3G,8BAAK,kDAQIC,EA3CC,SAAC3B,GACHA,EAAMP,MAAlB,IAEImC,EAAiB5B,EAAMP,MAAMoC,YAAYC,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAgBrB,KAAMqB,EAAOrB,KAAMT,GAAI8B,EAAO9B,GAAI+B,GAAID,EAAOC,QACpHC,EAAkBjC,EAAMP,MAAMyC,aAAaJ,KAAI,SAAAK,GAAO,OAAI,cAAC,EAAD,CAAStB,YAAasB,EAAQtB,YAAamB,GAAIG,EAAQH,QAQrH,OACE,sBAAKzB,UAAWC,IAAI4B,QAApB,UACE,qBAAK7B,UAAWC,IAAI6B,aAApB,SACGT,IAEH,sBAAKrB,UAAWC,IAAI8B,sBAApB,UACE,8BAAML,IACN,cAACjB,EAAD,CAAqBG,SAZP,SAACoB,GACjBvC,EAAMwC,YAAYD,EAAKE,0BCIdC,sBACbvC,aAfoB,SAACV,GACrB,MAAO,CACLA,MAAOA,EAAMkD,gBAIQ,SAACC,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,EAASC,YAAmBJ,SAOhC7C,IAFa8C,CAGbf","file":"static/js/4.38b684d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_list_block\":\"DialogNavBlock_dialogs_list_block__W5euU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__LrdA6\",\"dialogs_list\":\"Dialogs_dialogs_list__3BoOj\",\"dialogs_messages_list\":\"Dialogs_dialogs_messages_list__21gmo\"};","import { NavLink } from 'react-router-dom';\r\nimport css from './DialogNavBlock.module.css';\r\n\r\nconst DialogNavBlock = (props) => {\r\n    return (\r\n          <NavLink to={`/dialogs${props.to}`} className={css.dialogs_list_block}>{props.name}</NavLink>\r\n    );\r\n  }\r\n  \r\n  export default DialogNavBlock;","import css from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n  return (\r\n        <div className={css.dialogs_messages_list_block}>{props.messageText}</div>\r\n  );\r\n}\r\n\r\nexport default Message;","import { Redirect } from 'react-router-dom';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport DialogNavBlock from './DialogName/DialogNavBlock';\r\nimport css from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport { Textarea } from './../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, requiredField } from '../../utils/validators/validators';\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.state;\r\n\r\n  let dialogsDataMap = props.state.dialogsData.map(dialog => <DialogNavBlock name={dialog.name} to={dialog.to} id={dialog.id}/>)\r\n  let messagesDataMap = props.state.messagesData.map(message => <Message messageText={message.messageText} id={message.id}/>)\r\n  // let newMessageBody = props.state.newMessageBody;\r\n\r\n  let addNewMessage = (vals) => {\r\n      props.sendMessage(vals.newMessageBody)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={css.dialogs}>\r\n      <div className={css.dialogs_list}>\r\n        {dialogsDataMap}\r\n      </div>\r\n      <div className={css.dialogs_messages_list}>\r\n        <div>{messagesDataMap}</div>\r\n        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nconst maxLength20 = maxLengthCreator(20);\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} validate={[requiredField, maxLength20]} name={'newMessageBody'} placeholder={'enter your message'}/>\r\n      </div>\r\n      <div><button>send</button></div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hocs/withAutRedirect';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    state: state.dialogsPage\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody))\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}