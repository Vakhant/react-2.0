{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","utils/objects-helper.js","api/users-api.ts","redux/users-reducer.ts","App.module.css","components/Aside/Aside.module.css","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Aside/Aside.jsx","components/Login/Login.tsx","assets/img/logo.svg","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","hocs/withSuspense.tsx","App.tsx","index.js","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","assets/img/preloader.gif","components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","api/profile-api.ts","redux/profile-reducer.ts"],"names":["initialState","dialogsData","id","to","name","messagesData","messageText","dialogsReducer","state","action","type","messageBody","newMessageBody","length","actions","sendMessage","ResultCodeEnum","CaptchaResultCodeEnum","instance","axios","create","withCredentials","baseURL","headers","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","console","log","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","users","totalUsersCount","isFetching","followingInProgress","usersReducer","followed","totalCount","filter","dispatch","_followUnfollowFlow","apiMethod","ac","resultCode","bind","module","exports","authAPI","res","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","authReducer","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","auth","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","_store","Aside","className","css","nav_block","activeClassName","nav_block_active","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","Field","validate","requiredField","component","Input","placeholder","htmlFor","src","alt","connect","CaptchaIsRequired","message","messages","stopSubmit","_error","formData","Header","props","logo","onClick","logout","HeaderContainer","this","React","Component","withSuspense","fallback","Preloader","DialogsContainer","lazy","ProfileContainer","UsersContainer","SuspendedDialogs","SuspendedProfile","SuspendedUsers","App","catchAllUnhadledErrors","alert","initializeApp","addEventListener","removeEventListener","content","exact","path","render","pageTitle","Login","AppConteiner","withRouter","promise","Promise","all","AppWrap","ReactDOM","document","getElementById","Textarea","input","meta","touched","hasError","formControl","preloader","value","maxLengthCreator","maxLength","profileAPI","status","put","photo","FormData","append","profile","posts","likeCounts","newPostText","p","postId","photos","addPostActionCreator","setUserProfile","setStatus","deletePost","savePhotoSuccess","getUserProfile","getStatus","updateStatus","savePhoto","file","saveProfile","getState","Error","reject"],"mappings":"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","file":"static/js/main.d9ff9536.chunk.js","sourcesContent":["import { InferActionsTypes } from './redux-store';\r\n\r\ntype DialogsType = {\r\n    id: number,\r\n    to: string,\r\n    name: string\r\n}\r\ntype MessagesDataType = {\r\n    id: number,\r\n    messageText: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {id: 1, to:\"/taras\", name: \"Taras\"},\r\n        {id: 2, to:\"/sania\", name: \"Sania\"},\r\n        {id: 3, to:\"/vasiania\", name: \"Vasiania\"},\r\n        {id: 4, to:\"/tania\", name: \"Tania\"},\r\n        {id: 5, to:\"/rita\", name: \"Rita\"}\r\n    ] as Array<DialogsType>,\r\n    messagesData: [\r\n        {id: 1, messageText: \"Привет как дела\"},\r\n        {id: 2, messageText: \"Как твое It\"},\r\n        {id: 3, messageText: \"Еще не ахти?\"}\r\n    ] as Array<MessagesDataType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const dialogsReducer = (state = initialState, action:ActionsTypes) => {\r\n    switch(action.type){\r\n        case 'sn/dialogs/SEND-MESSAGE':\r\n            let messageBody = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messagesData: [...state.messagesData, {id: state.messagesData.length+2, messageText: messageBody}],\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody:string) => ({type: 'sn/dialogs/SEND-MESSAGE', newMessageBody} as const)\r\n}\r\nexport default dialogsReducer;","import axios from \"axios\";\r\nimport { UserType } from '../types/types';\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum CaptchaResultCodeEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data:D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string|null\r\n}\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"2fc274f6-5c86-48e9-aa6f-8e920b316173\",\r\n    }\r\n})","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    \r\n    return items.map(u=>{\r\n        if(u[objPropName] === itemId){\r\n            return {...u, ...newObjProps}\r\n        }\r\n        console.log(\"sdf\");\r\n        return u;\r\n    })\r\n}","import { instance, GetItemsType, APIResponseType } from './api';\r\n\r\nexport const usersAPI = {\r\n    getUsers: (currentPage = 1, pageSize = 10) => {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\r\n    },\r\n    follow(userId:number){\r\n        return instance.post<APIResponseType>(`follow/${userId}`, {withCredentials: true})\r\n    },\r\n    unfollow(userId:number){\r\n        return instance.delete(`follow/${userId}`, {withCredentials: true})\r\n    }\r\n    //console.warn()\r\n}","import { Dispatch } from \"redux\";\r\nimport { UserType } from \"../types/types\";\r\nimport { updateObjectInArray } from \"../utils/objects-helper\";\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport { usersAPI } from '../api/users-api';\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> // array of users ids\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n    switch(action.type){\r\n            case 'FOLLOW':\r\n                return {\r\n                    ...state,\r\n                    users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n            case 'UNFOLLOW':\r\n                return {\r\n                    ...state,\r\n                    users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n            case 'SET_USERS':{\r\n                return {...state, users: action.users}\r\n            }\r\n            case 'SET_CURRENT_PAGE':{\r\n                return {...state, currentPage: action.currentPage}\r\n            }\r\n            case 'SET_TOTAL_USERS_COUNT':{\r\n                return {...state, totalUsersCount: action.totalCount}\r\n            }\r\n            case 'TOGGLE_IS_FETCHING':{\r\n                return {...state, isFetching: action.isFetching}\r\n            }\r\n            case 'TOGGLE_FOLLOWING_IN_PROGRESS':{\r\n                return {...state, followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)}\r\n            }\r\n        default:\r\n            return state;\r\n        }\r\n}\r\n\r\n//action-creators AC\r\nexport const actions = {\r\n    followSuccess:            (userId:number) => ({type: 'FOLLOW', userId})as const,\r\n    unfollowSuccess:          (userId:number) => ({type: 'UNFOLLOW', userId})as const,\r\n    setUsers:                 (users:Array<UserType>) => ({type: 'SET_USERS', users})as const,\r\n    setCurrentPage:           (currentPage:number) => ({type: 'SET_CURRENT_PAGE', currentPage})as const,\r\n    setTotalUsersCount:       (totalCount:number) => ({type: 'SET_TOTAL_USERS_COUNT', totalCount})as const,\r\n    toggleIsFetching:         (isFetching:boolean) => ({type: 'TOGGLE_IS_FETCHING', isFetching})as const,\r\n    toggleFollowinInProgress: (isFetching:boolean, userId:number) => ({type: 'TOGGLE_FOLLOWING_IN_PROGRESS', isFetching, userId}as const)\r\n}\r\n//ThunkCreator\r\n\r\n\r\n\r\nexport const getUsers = (currentPage:number, pageSize:number): ThunkType => async (dispatch: DispatchType) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch:DispatchType, userId:number, apiMethod:any, ac:(userId:number)=>ActionsTypes) => {\r\n    dispatch(actions.toggleFollowinInProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0){\r\n      dispatch(ac(userId))\r\n    };\r\n    dispatch(actions.toggleFollowinInProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId:number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId:number): ThunkType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\ntype InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"App_content__2HqPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_block\":\"Aside_nav_block__j1osU\",\"nav_block_active\":\"Aside_nav_block_active__dGs8f\",\"hr\":\"Aside_hr__25PzA\"};","import { instance, APIResponseType, ResultCodeEnum, CaptchaResultCodeEnum } from './api';\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n        id: number\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email:string, password:string, rememberMe:boolean=false, captcha:string|null = null){\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeEnum|CaptchaResultCodeEnum>>(`auth/login`, {email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout(){   \r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import { instance } from \"./api\";\r\n\r\ntype GetcaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl: () => {\r\n        return instance.get<GetcaptchaUrlResponseType>(`security/get-captcha-url`).then(res=>res.data)\r\n    }\r\n}","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { CaptchaResultCodeEnum, ResultCodeEnum } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n    userId: null as number|null,\r\n    email: null as string|null,\r\n    login: null as string|null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string|null // if null, then captcha is not required\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch(action.type){\r\n        case 'sn/auth/SET_USER_DATA':\r\n        case 'sn/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n        }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId:number|null, email:string|null, login:string|null, isAuth:boolean) => ({type: 'sn/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getcaptchaUrlSuccess: (captchaUrl:string) => ({type: 'sn/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}} as const)\r\n}\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.authMe()\r\n    \r\n\r\n    if(meData.resultCode === ResultCodeEnum.Success){\r\n      let {id, email, login} = meData.data;\r\n      dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email:string, password:string, rememberMe:boolean, captcha:string):ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if(data.resultCode === ResultCodeEnum.Success){\r\n        dispatch(getAuthUserData());\r\n    }else{\r\n        if(data.resultCode === CaptchaResultCodeEnum.CaptchaIsRequired){\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = ():ThunkType => async (dispatch: any) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getcaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const logout = ():ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if(response.data.resultCode === 0){\r\n       dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>","import { getAuthUserData } from './auth-reducer';\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType):InitialStateType => {\r\n    switch(action.type){\r\n        case 'SN_APP_INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n        }\r\n}\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: 'SN_APP_INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    // dispatch(somethingElse())\r\n    Promise.all([promise]).then(()=>{dispatch(actions.initializedSuccess())})\r\n    // promise.then(dispatch(initializedSuccess()))\r\n}\r\n\r\n\r\nexport default appReducer;","import { combineReducers, createStore, applyMiddleware, compose, Action } from \"redux\";\r\nimport { authReducer } from \"./auth-reducer\";\r\nimport { dialogsReducer } from \"./dialogs-reducer\";\r\nimport { profileReducer } from \"./profile-reducer\";\r\nimport { usersReducer } from \"./users-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { appReducer } from './app-reducer';\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// let state: AppStateType\r\n// state.dialogsPage.messagesData\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n//@ts-ignore\r\nwindow._store = store\r\nexport default store","import { NavLink } from 'react-router-dom';\r\nimport css from './Aside.module.css';\r\n\r\nconst Aside = () => {\r\n  return (\r\n    <aside>\r\n      <nav>\r\n        <NavLink className={css.nav_block} to=\"/Profile\" activeClassName={css.nav_block_active}>Profile</NavLink>\r\n        <NavLink className={css.nav_block} to=\"/Dialogs\"  activeClassName={css.nav_block_active}>Dialogs</NavLink>\r\n        <NavLink className={css.nav_block} to=\"/users\" activeClassName={css.nav_block_active}>Users</NavLink>\r\n        <div className=\"hr\"></div>\r\n        <NavLink className={css.nav_block} to=\"Settings\" activeClassName={css.nav_block_active}>Settings</NavLink>\r\n      </nav>\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default Aside;","import { FC } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { InjectedFormProps } from 'redux-form';\r\nimport { Field, reduxForm } from \"redux-form\"\r\nimport { requiredField } from '../../utils/validators/validators';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string|null\r\n}\r\n\r\nconst LoginForm:FC<InjectedFormProps<LoginFormValuesType,LoginFormOwnPropsType> & LoginFormOwnPropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n            <Field validate={[requiredField]} component={Input} name={'email'} type=\"text\" placeholder=\"Email\"/>\r\n            <Field validate={[requiredField]} component={Input} name={'password'} type=\"text\" placeholder=\"Password\"/>\r\n            <Field component={Input} name={'rememberMe'} type=\"checkbox\" placeholder=\"\"/><label htmlFor=\"\">remember me</label>\r\n            {captchaUrl && <Field validate={[requiredField]} component={Input} name={'captcha'} type=\"text\" placeholder=\"captcha\"/>}\r\n            {captchaUrl && <img src={captchaUrl} alt={''}/>}\r\n            {error && <div>{error}</div>}\r\n            <button>Login</button>\r\n        </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType,LoginFormOwnPropsType>({form: 'login'})(LoginForm)\r\n\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string|null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email:string, password:string, rememberMe:boolean, captcha:string) => void\r\n}\r\ntype LoginFormValuesType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha:string\r\n}\r\nconst Login:FC<MapStateToPropsType&MapDispatchPropsType> = ({login, isAuth, captchaUrl}) => {\r\n    const onSubmit = (formData:any) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if(isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl, \r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","export default __webpack_public_path__ + \"static/media/logo.0a3e94f5.svg\";","import { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/img/logo.svg';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n      <header>\r\n        <div className=\"wrap\">\r\n          <div className=\"logo\">\r\n            <img src={logo} alt=\"\" />\r\n          </div>\r\n          <div className=\"lgn_block\">\r\n            {props.isAuth ?\r\n              <div>{props.login + \" \"} <button onClick={props.logout}>logout</button></div> :\r\n              <NavLink to={'/login'}>Login</NavLink>}\r\n          </div>\r\n        </div>\r\n      </header>\r\n  );\r\n}\r\n  \r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from './Header';\r\nimport { logout } from './../../redux/auth-reducer';\r\n\r\nclass HeaderContainer extends React.Component {\r\n  render(){\r\n    return <Header {...this.props} />\r\n  }\r\n}\r\n  \r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React, { Suspense } from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\nexport function withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n    return (props:WCP) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}","import React, { ComponentType } from 'react';\r\nimport { BrowserRouter, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport { Provider, connect } from 'react-redux';\r\nimport store from './redux/redux-store';\r\nimport css from './App.module.css';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport Aside from './components/Aside/Aside';\r\nimport Login from './components/Login/Login';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport { withSuspense } from './hocs/withSuspense';\r\nimport { Switch } from 'react-router-dom';\r\nimport { AppStateType } from './redux/redux-store';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedUsers = withSuspense(UsersContainer)\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n  catchAllUnhadledErrors = () => {\r\n    alert(\"some error occured\")\r\n  }\r\n  componentDidMount(){\r\n    this.props.initializeApp();\r\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhadledErrors)\r\n  }\r\n  componentWillUnmount(){\r\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhadledErrors)\r\n  }\r\n\r\n  render(){\r\n    if(!this.props.initialized){\r\n      return <Preloader/>\r\n    }\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n\r\n        <HeaderContainer/>\r\n\r\n          <main>\r\n            <div className=\"wrap\">\r\n              <Aside/>\r\n              <div className={css.content}>\r\n                <Switch>\r\n                  <Route exact path=\"/\" render={():any => {<Redirect to=\"/profile\"/>}}/>\r\n                  <Route path=\"/dialogs\" render={() => <SuspendedDialogs/>}/>\r\n                  <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile/>}/>\r\n                  <Route path=\"/users\" render={() => <SuspendedUsers pageTitle={\"Users\"}/>}/>\r\n                  <Route path=\"/login\" render={withSuspense(Login)}/>\r\n                  <Route path=\"*\" render={():any => {<div>404 not found</div>}}/>\r\n                </Switch>\r\n              </div>\r\n            </div>\r\n          </main>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nlet AppConteiner = compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp})\r\n  ) (App)\r\n\r\nlet AppWrap: React.FC = () => {\r\n  return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppConteiner/>\r\n        </Provider>\r\n  </BrowserRouter>\r\n}\r\n\r\nexport default AppWrap;","import './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport AppWrap from './App';\r\n\r\nReactDOM.render(<AppWrap />, document.getElementById('root'));","import css from './FormsControls.module.css'\r\nimport { FC } from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={css.formControl + \" \" + (hasError ? css.error : \"\")}>\r\n            <textarea {...input} {...props}></textarea>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Input: FC<WrappedFieldProps> = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={css.formControl + \" \" + (hasError ? css.error : \"\")}>\r\n            <input {...input} {...props}></input>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3MZN9\",\"error\":\"FormsControls_error__3KVCs\"};","export default __webpack_public_path__ + \"static/media/preloader.9fed7e0b.gif\";","import React from 'react';\r\nimport preloader from '../../../assets/img/preloader.gif';\r\n\r\nconst Preloader: React.FC = (props) => {\r\n  return (<img src={preloader} alt=''/>);\r\n}\r\n\r\nexport default Preloader;","export type FieldValidatorType = (value:string) => string | undefined\r\n\r\nexport const requiredField: FieldValidatorType = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n\r\n//call inside variable(let, const) outside the validate={} attr\r\nexport const maxLengthCreator = (maxLength:number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength}`;\r\n    return undefined;\r\n}","import { instance, APIResponseType } from './api';\r\nimport { PhotosType, ProfileType } from \"../types/types\";\r\n\r\ntype SavePhotoRedponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId:number){\r\n        \r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data)\r\n    },\r\n    getStatus(userId:number){\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateProfile(status:string){\r\n        return instance.put<APIResponseType>(`profile/status`, {status}).then(res => res.data)\r\n    },\r\n    savePhoto(photo:File){\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photo)\r\n        return instance.put<APIResponseType<SavePhotoRedponseDataType>>(`profile/photo`, formData, {headers: {'Content-Type': 'multipart/form-data'}}).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType){\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import { stopSubmit, FormAction } from 'redux-form';\r\nimport { PhotosType, PostType, ProfileType } from \"../types/types\";\r\nimport { profileAPI } from '../api/profile-api';\r\nimport { InferActionsTypes, BaseThunkType } from './redux-store';\r\n\r\nlet initialState = {\r\n    profile: null as ProfileType | null,\r\n    posts: [\r\n        {id: 1, likeCounts:4, message: \"abracadabraa\"},\r\n        {id: 2, likeCounts:15, message: \"abracadabra\"},\r\n        {id: 3, likeCounts:3, message: \"abracadabr\"},\r\n        {id: 4, likeCounts:11, message: \"abracadab\"}\r\n    ] as Array<PostType>,\r\n    status: '',\r\n    newPostText: \"\"\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state = initialState, action:ActionsTypes) => {\r\n    switch(action.type){\r\n        case 'sn/profile/ADD_POST':{\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id:5, likeCounts: 25, message: action.newPostText}],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case 'sn/profile/SET_USER_PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n            case 'sn/profile/SET_STATUS':\r\n                return {...state, status: action.status}\r\n            case 'sn/profile/DELETE_POST':\r\n                return {...state, posts: state.posts.filter(p=>p.id !== action.postId)}\r\n            case 'sn/profile/SAVE_PHOTO_SUCCESS':\r\n                return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'sn/profile/ADD_POST', newPostText} as const),\r\n    setUserProfile:       (profile: ProfileType) => ({type: 'sn/profile/SET_USER_PROFILE', profile} as const),\r\n    setStatus:            (status: string) => ({type: 'sn/profile/SET_STATUS', status} as const),\r\n    deletePost:           (postId: number) => ({type: 'sn/profile/DELETE_POST', postId} as const),\r\n    savePhotoSuccess:     (photos: PhotosType) => ({type: 'sn/profile/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId:number):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string):ThunkType => async (dispatch) => {\r\n    try{\r\n    let data = await profileAPI.updateProfile(status)\r\n    \r\n    if(data.resultCode === 0){\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n    }catch(error){debugger}\r\n}\r\n\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n    \r\n    if(data.resultCode === 0){\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType):ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n    if(data.resultCode === 0){\r\n        if(userId != null){\r\n            dispatch(getUserProfile(userId));\r\n        }else{\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }else{\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: message}));\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>"],"sourceRoot":""}