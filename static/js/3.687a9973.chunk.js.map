{"version":3,"sources":["assets/img/avatar.svg","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hocs/withAutRedirect.tsx","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restPtops","to","module","exports","Post","className","css","post","width","height","src","logo","alt","id","message","post_nav","likeCounts","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","requiredField","component","Textarea","name","placeholder","addpost_text_area","MyPosts","postsDataMap","posts","map","vals","addPost","newPostText","MyPostsContainer","profilePage","actions","addPostActionCreator","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","onBlur","updateStatus","type","ProfileDataFormReduxForm","deactivateEditMode","error","profile","Input","Object","keys","contacts","key","ProfileData","isOwner","activateEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact_list","ProfileInfo","savePhoto","saveProfile","user_photo","photos","large","userPhoto","initialValues","formData","then","console","log","target","files","Profile","Preloader","ProfileContainer","userId","this","match","params","autherisedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","React","compose","withRouter"],"mappings":"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","file":"static/js/3.687a9973.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.acbde035.svg\";","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<DispatchPropsType & MapPropsType> = (props) => {\r\n        let {isAuth, ...restPtops} = props\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n\r\n        return <Component {...restPtops as WCP}/>\r\n    }\r\n\r\n    // class RedirectComponent extends React.Component {\r\n    //     render() {\r\n    //         if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    //         return <Component {...this.props} />\r\n    //     }\r\n    // }\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType,DispatchPropsType,WCP,AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user_photo\":\"Profile_user_photo__3pZqo\",\"contact_list\":\"Profile_contact_list__13hIc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addpost_text_area\":\"MyPosts_addpost_text_area__1uQk-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__26lwK\",\"post_nav\":\"Post_post_nav__22phG\"};","import logo from '../../../../../src/assets/img/avatar.svg';\r\nimport css from './Post.module.css';\r\n\r\ntype PropsT = {\r\n  id: number\r\n  message: string\r\n  likeCounts: number\r\n}\r\n\r\nconst Post:React.FC<PropsT> = (props) => {\r\n  return (\r\n        <div className={css.post}>\r\n            <div className=\"avatar\">\r\n                <img width=\"80\" height=\"80\" src={logo} alt=\"\" />\r\n            </div>\r\n            <div>post {props.id}</div>\r\n            <div>{props.message}</div>\r\n            <div className={css.post_nav}></div>\r\n            <div><button>like {props.likeCounts}</button></div>\r\n            <div><button>dislike</button></div>\r\n            \r\n            \r\n        </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React, { FC } from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { PostType } from '../../../types/types';\r\nimport { maxLengthCreator, requiredField } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport css from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nexport type MapPropsT = {\r\n  posts: Array<PostType>\r\n}\r\nexport type DispatchPropsT = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsT&DispatchPropsT> = (props) => {\r\n  let postsDataMap = props.posts.map(post => <Post key={post.id} likeCounts={post.likeCounts} message={post.message} id={post.id}/>)\r\n  let addPost = (vals:any) => {\r\n    props.addPost(vals.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <h3>MyPosts</h3>\r\n        <AddNewPostReduxForm onSubmit={addPost}/>\r\n      <div className=\"posts_list\">\r\n        {postsDataMap}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\ntype AddPostFormValuesT = {\r\n  newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesT, PropsType> & PropsType> = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field validate={[requiredField, maxLength10]} component={Textarea} name={'newPostText'} placeholder={'enter your message'} className={css.addpost_text_area}/>\r\n      </div>\r\n      <div><button>Add post</button></div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddPostFormValuesT, PropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\n  \r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport MyPosts, { DispatchPropsT, MapPropsT } from './MyPosts';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { actions } from '../../../redux/profile-reducer';\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsT, DispatchPropsT, {}, AppStateType>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator\r\n}\r\n)(MyPosts);\r\n\r\n  \r\nexport default MyPostsContainer;","import React, { ChangeEvent, useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\ntype PropsT = {\r\n  status: string\r\n  updateStatus: (status: string)=>void\r\n}\r\n\r\nconst ProfileStatus:React.FC<PropsT> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus]     = useState(props.status);\r\n  \r\n    useEffect(() => setStatus(props.status), [props.status])\r\n  \r\n    const activateEditMode = () => setEditMode(true)\r\n  \r\n    const deactivateEditMode = () => {\r\n      setEditMode(false);\r\n      props.updateStatus(status);\r\n    }\r\n    \r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    \r\n      return (\r\n        <div>\r\n          {!editMode &&\r\n          <div onClick={activateEditMode}>{props.status || \"Добавить статус\"}</div>\r\n          }\r\n          {editMode &&\r\n            <input onChange={onStatusChange} onBlur={deactivateEditMode} value={status} type=\"text\" />\r\n          }\r\n        </div>\r\n      )\r\n  }\r\n\r\nexport default ProfileStatus;","import { reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Field } from \"redux-form\"\r\nimport { Input, Textarea } from \"../common/FormsControls/FormsControls\"\r\nimport css from './Profile.module.css';\r\nimport { FC } from 'react';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype PropsT = {\r\n    deactivateEditMode: ()=>void\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType,PropsT> & PropsT> = \r\n({handleSubmit, deactivateEditMode, error, profile}) => {\r\n    return (<>\r\n        <button onClick={deactivateEditMode}>&larr; return</button>\r\n        <form onSubmit={handleSubmit}>\r\n            <button>save</button>\r\n\r\n            {error && <div>{error}</div>}\r\n\r\n            <div><b>Full name:</b>\r\n                <Field component={Input} name={'fullName'} type=\"text\" placeholder=\"Full name\"/>\r\n            </div>\r\n            \r\n            <div><b>Looking for a job:</b> \r\n                <Field component={'input'} name={'lookingForAJob'} type=\"checkbox\"/>\r\n            </div>\r\n            <div\r\n                ><b>My proffesional skills:</b> \r\n                <Field component={Textarea} name={'lookingForAJobDescription'} placeholder=\"lookingForAJobDescription\"/>\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                <Field component={Textarea} name={'aboutMe'} placeholder={'enter your message'} className={css.addpost_text_area}/>\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>\r\n             {Object.keys(profile.contacts).map(key =>\r\n                <div key={key}><b>{key}: </b> \r\n                    <Field component={'input'} name={`contacts.${key}`} type=\"text\" placeholder={key}/>\r\n                </div>)}\r\n            </div>\r\n        </form>\r\n        </>\r\n    )\r\n  }\r\n\r\n  const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsT>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { useState, FC } from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport css from './Profile.module.css';\r\nimport userPhoto from '../../assets/img/avatar.svg'\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport ProfileDataFormReduxForm from './ProfileDataForm';\r\nimport { ProfileType, ContactsType } from '../../types/types';\r\n\r\ntype ProfileDataPropsT = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsT> = ({profile, isOwner, activateEditMode}) => {\r\n  return (\r\n    <>\r\n    {isOwner && <button onClick={activateEditMode}>edit</button>}\r\n    <div><b>Full name:</b> {profile.fullName}</div>\r\n      \r\n    <div><b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\r\n    <div><b>My proffesional skills:</b> {profile.lookingForAJobDescription}</div>\r\n    <div><b>About me:</b> {profile.aboutMe}</div>\r\n    <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => \r\n    <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />)}</div>\r\n    </>\r\n  )\r\n}\r\n\r\ntype ContactPropsT = {\r\n  contactTitle: string\r\n  contactValue: string|null\r\n}\r\n\r\nconst Contact: FC<ContactPropsT> = ({contactTitle, contactValue}) => {\r\n  return <div className={css.contact_list}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\ntype ProfileInfoPropsT = {\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsT> = ({savePhoto, saveProfile, profile, isOwner, status, updateStatus}) => {\r\n  \r\n  let [editMode, setEditMode] = useState(false);\r\n  const omMainPhotoSelected = (e:any) => {\r\n    e.target.files.length && savePhoto(e.target.files[0])\r\n  }\r\n  \r\n  const onSubmit = (formData: ProfileType) => {\r\n    // todo: remove then\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n    console.log(formData)\r\n  }\r\n  return (\r\n    <>\r\n      <img className={css.user_photo} src={profile.photos.large || userPhoto} alt=\"\" />\r\n      {editMode ?\r\n      <ProfileDataFormReduxForm profile={profile} initialValues={profile} onSubmit={onSubmit} deactivateEditMode={() => {setEditMode(false)}}/> :\r\n      <ProfileData activateEditMode={() => {setEditMode(true)}} isOwner={isOwner} profile={profile}/>\r\n      }      \r\n      {isOwner && <input type={\"file\"} onChange={omMainPhotoSelected}/>}\r\n      <div><b>Status:</b> <ProfileStatus status={status} updateStatus={updateStatus}/></div>\r\n    </>\r\n  )\r\n}\r\n\r\ntype ProfilePropsT = ProfileInfoPropsT\r\n\r\nconst Profile: FC<ProfilePropsT & any> = ({savePhoto, saveProfile, profile, isOwner, status, updateStatus}) => {\r\n  \r\n  if(!profile){\r\n    return <Preloader/>\r\n  }\r\n    return (\r\n      <>\r\n      <ProfileInfo  \r\n      saveProfile={saveProfile}\r\n      status={status} \r\n      updateStatus={updateStatus}\r\n      savePhoto={savePhoto}\r\n      isOwner={isOwner}\r\n      profile={profile}/>\r\n      \r\n      <MyPostsContainer/>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport { getUserProfile, updateStatus, getStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withAuthRedirect } from \"../../hocs/withAutRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapStatePropsT = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPtopsT = {\r\n    savePhoto: (file:File)=>void\r\n    getUserProfile: (userId: number)=>void\r\n    getStatus: (userId: number)=>void\r\n    updateStatus: (status: string)=>void\r\n    saveProfile: (profile: ProfileType)=>Promise<any>\r\n}\r\n\r\ntype PathParamsT = {\r\n    userId: string\r\n}\r\n\r\ntype PropsT = MapStatePropsT & MapDispatchPtopsT & RouteComponentProps<PathParamsT>\r\n\r\nclass ProfileContainer extends React.Component<PropsT> {\r\n\r\n    refreshProfile(){\r\n        let userId:number|null = +this.props.match.params.userId;\r\n        \r\n        if(!userId){\r\n            userId = this.props.autherisedUserId\r\n            // this.props.history.push(\"/login\");\r\n            if(!userId){\r\n                console.error('ID should exist in URI params or in state(authorizedUserId)')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId as number)\r\n        this.props.getStatus(userId as number)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsT, prevState:PropsT) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId){this.refreshProfile()}\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Profile \r\n            isOwner={!this.props.match.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto}\r\n            saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autherisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {savePhoto, getUserProfile, getStatus, updateStatus, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}